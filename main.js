!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isliked=e.isLiked,this._cardSelector=document.querySelector(t),this._handleCardClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this._element=this._cardSelector.content.querySelector(".card").cloneNode(!0),this._likeBtn=this._element.querySelector("#card__like-button"),this._deleteBtn=this._element.querySelector("#card__delete-button"),this._cardImage=this._element.querySelector("#card__image"),this._cardTitle=this._element.querySelector("#card__title")}setIsLiked(e){this._isLiked=e,this._handleLikeIcon()}isLiked(){return this._isLiked}_handleLikeIcon(){this._isLiked?this._likeBtn.classList.add("card__like-button_active"):this._likeBtn.classList.remove("card__like-button_active")}_setEventListeners(){this._likeBtn.addEventListener("click",(()=>{this._handleLikeClick(this._id)})),this._deleteBtn.addEventListener("click",(()=>{this._handleDeleteClick(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})}))}getView(){return this._setEventListeners(),this._handleLikeIcon(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._element}removeCard(){this._element.remove()}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitBtn=this._formElement.querySelector(this._submitButtonSelector)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_toggleBtnState(){if(this._hasInvalidInput(this._inputElements))return this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.disabled=!0;this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.disabled=!1}_showInputError(e){this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}resetValidation(){this._toggleBtnState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleBtnState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._classSelector=document.querySelector(t)}addItem(e){this._classSelector.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}class r{constructor(e){this._popupEl=document.querySelector(e)}open(){this._popupEl.classList.add("popup_opened"),document.addEventListener("keydown",this._closeByEscape)}close(){this._popupEl.classList.remove("popup_opened"),document.removeEventListener("keydown",this._closeByEscape)}_closeByEscape=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupEl.addEventListener("mousedown",(e=>{e.target.classList.contains("popup_opened")&&this.close(),e.target.classList.contains("popup__close")&&this.close()}))}}class i extends r{constructor(e,t){super(e),this._popupForm=this._popupEl.querySelector(".popup__form"),this._submitBtn=this._popupForm.querySelector(".popup__save"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{const e=this._getInputValues();this._handleFormSubmit(e)}))}close(){this._popupForm.reset(),super.close()}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}renderLoading(e,t){e&&(this._submitBtn.textContent="Saving..."),e||(this._submitBtn.textContent=t)}}const n=document.querySelector("#profile__edit-button"),o=document.querySelector("#profile__add-button"),a=document.querySelector(".profile__image-edit"),l={};var h;h={inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible",formSelector:".popup__form"},Array.from(document.querySelectorAll(h.formSelector)).forEach((e=>{const s=new t(h,e),r=e.getAttribute("name");l[r]=s,s.enableValidation()}));const c=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUsersInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkServerResponse)}getCardList(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkServerResponse)}getAPIInfo(){return Promise.all([this.getUsersInfo(),this.getCardList()])}editProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkServerResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkServerResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkServerResponse)}addCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkServerResponse)}removeCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkServerResponse)}editProfilePhoto(e){return fetch(`${this._baseUrl}/users/me/avatar `,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._checkServerResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6d3d8659-087c-48a4-9b8b-b1f3f711b21d","Content-Type":"application/json"}}),_=new class{constructor(e,t,s){this._name=document.querySelector(e),this._job=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._job.textContent}}getUserPhoto(){return{avatar:this._avatar.src}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.about}setUserPhoto(e){this._avatar.src=e.avatar}}("#profile__name","#profile__description","#profile__image"),d=new i("#profile-popup",(e=>{!function(e){d.renderLoading(!0,"Save"),c.editProfile(e).then((e=>{_.setUserInfo(e),d.close()})).catch((e=>{console.log(e)})).finally((()=>{d.renderLoading(!1,"Save")}))}(e)})),u=new i("#photo-add-popup",(e=>{!function(e){u.renderLoading(!0,"Create"),c.addNewCard(e).then((e=>{const t=E(e);L.addItem(t),u.close()})).catch((e=>{console.log(e)})).finally((()=>{u.renderLoading(!1,"Create")}))}(e)})),p=new i("#profile-photo-popup",(e=>{!function(e){p.renderLoading(!0,"Save"),c.editProfilePhoto(e).then((e=>{_.setUserPhoto(e),p.close()})).catch((e=>{console.log(e)})).finally((()=>{p.renderLoading(!1,"Save")}))}(e)})),m=new class extends r{constructor(e){super(e),this._title=this._popupEl.querySelector(".popup__title"),this._image=this._popupEl.querySelector(".popup__full-photo")}open(e){super.open(),this._image.src=e.link,this._image.alt=e.name,this._title.textContent=e.name}}("#full-photo-popup"),v=new class extends r{constructor(e){super(e),this._popupForm=this._popupEl.querySelector(".popup__form"),this._deleteBtn=this._popupEl.querySelector(".popup__save")}setSubmitAction(e){this._handleFormSubmit=e}renderLoading(e){this._deleteBtn.textContent=e?"Saving...":"Yes"}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{this._handleFormSubmit(e)}))}}("#photo-delete-popup");function E(t){const s=new e(t,"#card-template",(e=>{m.open(e)}),(e=>{v.open(),v.setSubmitAction((()=>{v.renderLoading(!0),c.deleteCard(e).then((()=>{s.removeCard(e),v.close()})).catch((e=>{console.log(e)})).finally((()=>{v.renderLoading(!1)}))}))}),(e=>{s.isLiked()?c.removeCardLike(e).then((e=>s.setIsLiked(e.isLiked))).catch((e=>console.log(e))):c.addCardLike(e).then((e=>s.setIsLiked(e.isLiked))).catch((e=>console.log(e)))}));return s.getView()}let L;c.getAPIInfo().then((e=>{let[t,r]=e;_.setUserInfo(t),_.setUserPhoto(t),L=new s({items:r,renderer:e=>{const t=E(e);L.addItem(t)}},"#gallery__cards"),L.renderItems()})).catch((e=>{console.log(e)})),d.setEventListeners(),u.setEventListeners(),m.setEventListeners(),p.setEventListeners(),v.setEventListeners(),n.addEventListener("click",(()=>{const{name:e,about:t}=_.getUserInfo();d.setInputValues({name:e,about:t}),d.open(),l.profile_form.resetValidation()})),o.addEventListener("click",(()=>{u.open(),l.photo_form.resetValidation()})),a.addEventListener("click",(()=>{p.open(),l.profile_photo_form.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,